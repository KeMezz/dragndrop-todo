{"version":3,"sources":["atoms.tsx","components/DraggableCard.tsx","components/DroppableBoard.tsx","App.tsx","index.tsx","theme.ts"],"names":["categories","toDosState","atom","key","default","localStorage","getItem","JSON","parse","SCHEDULED","DOING","DONE","Card","styled","li","props","isDragging","draggingOver","theme","bgColor","DraggableCard","toDoID","toDoText","index","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","React","memo","Wrapper","div","Board","ul","isDraggingOver","Title","h2","Form","form","Input","input","AddBtn","button","DroppableBoard","droppableId","toDos","useForm","register","setValue","handleSubmit","useRecoilState","allToDos","setAllToDos","setItem","stringify","onSubmit","data","allBoards","newToDo","text","toDo","id","Date","now","required","type","placeholder","autoComplete","autoSave","draggingFromThisWith","Boolean","droppableProps","map","Boards","section","Trash","cardColor","App","setToDos","onDragEnd","info","destination","source","targetBoard","taskObj","splice","sourceBoard","Object","keys","boardId","className","GlobalStyle","createGlobalStyle","textColor","ReactDOM","render","StrictMode","Helmet","rel","href","boardColor","document","getElementById"],"mappings":"mJAEYA,E,8GAAAA,O,yBAAAA,I,iBAAAA,I,gBAAAA,M,KAeL,I,EAAMC,EAAaC,YAAyB,CACjDC,IAAK,aACLC,QAASC,aAAaC,QAAQ,SAC1BC,KAAKC,MAAMH,aAAaC,QAAQ,UAChC,CACEG,UAAW,GACXC,MAAO,GACPC,KAAM,M,eCfRC,EAAOC,IAAOC,GAAV,qPACY,SAACC,GAAD,OAAYA,EAAMC,WAAa,UAAY,UACpD,SAAAD,GAAK,MAA2B,UAAvBA,EAAME,aAA2B,MAAQ,OAC/C,SAACF,GAAD,OACZA,EAAMC,WAAa,6BAA+B,UAE3C,SAACD,GAAD,OAAWA,EAAMG,MAAMC,WAEvB,SAACJ,GAAD,OAAYA,EAAMC,WAAa,OAAS,UAWnD,SAASI,EAAT,GAA6E,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MACzC,OACE,cAAC,IAAD,CAAWC,YAAaH,EAAS,GAAIE,MAAOA,EAA5C,SACG,SAACE,EAAOC,GAAR,OACC,cAACd,EAAD,qCACEK,aAAcS,EAAST,aACvBD,WAAYU,EAASV,WACrBW,IAAKF,EAAMG,UACPH,EAAMI,iBACNJ,EAAMK,gBALZ,aAOGR,QAOIS,I,YAAAA,MAAMC,KAAKZ,GCvCpBa,EAAUpB,IAAOqB,IAAV,6KAcPC,EAAQtB,IAAOuB,GAAV,gNAOW,SAACrB,GAAD,OAClBA,EAAMsB,eAAiB,UAAY,aAGjCC,EAAQzB,IAAO0B,GAAV,+HACA,SAACxB,GAAD,OAAWA,EAAMG,MAAMC,WAc5BqB,EAAO3B,IAAO4B,KAAV,kIAOJC,EAAQ7B,IAAO8B,MAAV,8JASLC,EAAS/B,IAAOgC,OAAV,mKA6DGC,I,IAAAA,EApDf,YAA0E,IAAhDC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,MACrC,EAA6CC,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,aAC5B,EAAgCC,YAAepD,GAA/C,mBAAOqD,EAAP,KAAiBC,EAAjB,KAaA,OAFAlD,aAAamD,QAAQ,QAASjD,KAAKkD,UAAUH,IAG3C,eAACrB,EAAD,WACE,cAACK,EAAD,UAAQS,IACR,eAACP,EAAD,CAAMkB,SAAUN,GAfA,SAACO,GACnBJ,GAAY,SAAAK,GACR,IAAMC,EAAyB,CAAEC,KAAMH,EAAKI,KAAMC,GAAIC,KAAKC,OAC3D,OAAO,2BACAN,GADP,kBAEKb,EAFL,CAEoBc,GAFpB,mBAEgCD,EAAUb,UAG9CI,EAAS,OAAQ,OAOf,UACE,cAACT,EAAD,2BACMQ,EAAS,OAAQ,CAAEiB,SAAU,wDADnC,IAEEC,KAAK,OACLC,YAAW,sBAAiBtB,GAC5BuB,aAAa,MACbC,SAAS,SAEX,cAAC3B,EAAD,qBAEF,cAAC,IAAD,CAAWG,YAAaA,EAAxB,SACG,SAACtB,EAAOC,GAAR,OACC,eAACS,EAAD,yBACEE,eAAgBX,EAASW,eACzBmC,qBAAsBC,QAAQ/C,EAAS8C,sBACvC7C,IAAKF,EAAMG,UACPH,EAAMiD,gBAJZ,cAMG1B,EAAM2B,KAAI,SAACZ,EAAMxC,GAAP,OACT,cAAC,EAAD,CAEEF,OAAQ0C,EAAKC,GACb1C,SAAUyC,EAAKD,KACfvC,MAAOA,GAHFwC,EAAKC,OAMbvC,EAAM4C,uBC9GbO,EAAS/D,IAAOgE,QAAV,sOAgBNC,EAAQjE,IAAOqB,IAAV,4TAQW,SAACnB,GAAD,OAClBA,EAAMsB,eAAiB,UAAYtB,EAAMG,MAAM6D,aA+EpCC,I,EAAAA,EAvEf,WACE,MAA0B3B,YAAepD,GAAzC,mBAAO+C,EAAP,KAAciC,EAAd,KA4CA,OACE,eAAC,IAAD,CAAiBC,UA5CD,SAACC,GACjB,IAAQC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,OACrB,GAAKD,EAAL,CAcA,GAbIC,EAAOtC,cAAgBqC,EAAYrC,aAErCkC,GAAS,SAACrB,GACR,IAAM0B,EAAW,YAAO1B,EAAUyB,EAAOtC,cACnCwC,EAAUD,EAAYD,EAAO9D,OAGnC,OAFA+D,EAAYE,OAAOH,EAAO9D,MAAO,GACjC+D,EAAYE,OAAOJ,EAAY7D,MAAO,EAAGgE,GAClC,2BACF3B,GADL,kBAEGyB,EAAOtC,YAAcuC,OAII,UAA5BF,EAAYrC,YASd,OARAkC,GAAS,SAAArB,GACP,IAAM0B,EAAW,YAAO1B,EAAUyB,EAAOtC,cAEzC,OADAuC,EAAYE,OAAOH,EAAO9D,MAAO,GAC1B,2BACFqC,GADL,kBAEGyB,EAAOtC,YAAcuC,OAGnB,KAELD,EAAOtC,cAAgBqC,EAAYrC,aAErCkC,GAAS,SAACrB,GAAe,IAAD,EAChB6B,EAAW,YAAO7B,EAAUyB,EAAOtC,cACnCwC,EAAUE,EAAYJ,EAAO9D,OAC7B+D,EAAW,YAAO1B,EAAUwB,EAAYrC,cAG9C,OAFA0C,EAAYD,OAAOH,EAAO9D,MAAO,GACjC+D,EAAYE,OAAOJ,EAAY7D,MAAO,EAAGgE,GAClC,2BACF3B,GADL,uBAEGyB,EAAOtC,YAAc0C,GAFxB,cAGGL,EAAYrC,YAAcuC,GAH7B,SASJ,UACE,cAACV,EAAD,UACGc,OAAOC,KAAK3C,GAAO2B,KAAI,SAACiB,GAAD,OACtB,cAAC,EAAD,CAEE7C,YAAa6C,EACb5C,MAAOA,EAAM4C,IAFRA,QAMX,cAAC,IAAD,CAAW7C,YAAY,QAAvB,SACG,SAACtB,EAAOC,GAAR,OACC,cAACoD,EAAD,yBACEzC,eAAgBX,EAASW,eACzBV,IAAKF,EAAMG,UACPH,EAAMiD,gBAHZ,aAKE,mBAAGmB,UAAU,uB,QC7FnBC,EAAcC,YAAH,wFAEO,SAAChF,GAAD,OAAWA,EAAMG,MAAMC,WAClC,SAACJ,GAAD,OAAWA,EAAMG,MAAM8E,aAIpCC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,EAAA,EAAD,UACE,sBACEC,IAAI,aACJC,KAAK,+DAGT,cAAC,IAAD,UACE,eAAC,IAAD,CAAepF,MCvBiB,CAClCC,QAAS,UACT6E,UAAW,UACXO,WAAY,UACZxB,UAAW,WDmBT,UACE,cAACe,EAAD,IACA,cAAC,EAAD,YAINU,SAASC,eAAe,W","file":"static/js/main.60119c93.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport enum categories {\n    \"SCHEDULED\",\n    \"DOING\",\n    \"DONE\"\n}\n\nexport interface toDoInterface {\n    id: number,\n    text: string,\n}\n\ninterface toDoStateInterface {\n  [key: string]: toDoInterface[];\n}\n\nexport const toDosState = atom<toDoStateInterface>({\n  key: \"toDosState\",\n  default: localStorage.getItem(\"toDos\")\n    ? JSON.parse(localStorage.getItem(\"toDos\") as any)\n    : {\n        SCHEDULED: [],\n        DOING: [],\n        DONE: [],\n      },\n});","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\ninterface CardProps {\n  isDragging: boolean;\n  draggingOver?: string;\n}\n\nconst Card = styled.li<CardProps>`\n  background-color: ${(props) => (props.isDragging ? \"#b2bec3\" : \"#fff\")};\n  opacity: ${props => props.draggingOver === \"trash\" ? \"0.3\" : \"1\"};\n  box-shadow: ${(props) =>\n    props.isDragging ? \"0 2px 10px rgba(0,0,0,0.5)\" : \"none\"};\n  transition: opacity, background-color 0.3s ease-in-out;\n  color: ${(props) => props.theme.bgColor};\n  padding: 16px 30px;\n  width: ${(props) => (props.isDragging ? \"40px\" : \"auto\")};\n  margin: 6px 0;\n  border-radius: 10px;\n`;\n\ninterface DraggableCardInterface {\n  toDoID: number;\n  toDoText: string;\n  index: number;\n}\n\nfunction DraggableCard({ toDoID, toDoText, index }: DraggableCardInterface) {\n  return (\n    <Draggable draggableId={toDoID + \"\"} index={index}>\n      {(magic, snapshot) => (\n        <Card\n          draggingOver={snapshot.draggingOver}\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.dragHandleProps}\n          {...magic.draggableProps}\n        >\n          {toDoText}\n        </Card>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(DraggableCard);\n","import { Droppable } from \"react-beautiful-dnd\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoInterface, toDosState } from \"../atoms\";\nimport DraggableCard from \"./DraggableCard\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #81ecec;\n  border-radius: 16px;\n  height: fit-content;\n  min-height: 400px;\n`;\n\ninterface BoardProps {\n  isDraggingOver: boolean;\n  draggingFromThisWith: boolean;\n}\n\nconst Board = styled.ul<BoardProps>`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 12px;\n  border-radius: 16px;\n  transition: background-color 0.3s ease-in-out;\n  background-color: ${(props) =>\n    props.isDraggingOver ? \"#55efc4\" : \"#00cec9\"};\n`;\n\nconst Title = styled.h2`\n  color: ${(props) => props.theme.bgColor};\n  text-align: center;\n  padding: 20px 0;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\ninterface DroppableBoardInterface {\n  droppableId: string;\n  toDos: toDoInterface[];\n}\ninterface FormInterface {\n  toDo: string;\n}\nconst Form = styled.form`\n  display: flex;\n  height: 40px;\n  padding-bottom: 12px;\n  justify-content: center;\n  gap: 10px;\n`;\nconst Input = styled.input`\n    width: 60%;\n    padding: 0 20px;\n    border: none;\n    border-radius: 20px;\n    &:focus {\n        outline: none;\n    }\n`;\nconst AddBtn = styled.button`\n    width: 20%;\n    border: none;\n    background-color: crimson;\n    color: white;\n    border-radius: 20px;\n    cursor: pointer;\n`;\n\nfunction DroppableBoard({ droppableId, toDos }: DroppableBoardInterface) {\n  const { register, setValue, handleSubmit } = useForm<FormInterface>();\n  const [allToDos, setAllToDos] = useRecoilState(toDosState);\n  const onFormValid = (data: FormInterface) => {\n    setAllToDos(allBoards => {\n        const newToDo: toDoInterface = { text: data.toDo, id: Date.now() };\n        return {\n            ...allBoards,\n            [droppableId]: [newToDo, ...allBoards[droppableId]]\n        }\n    })\n    setValue(\"toDo\", \"\");\n  };\n  localStorage.setItem(\"toDos\", JSON.stringify(allToDos));\n\n  return (\n    <Wrapper>\n      <Title>{droppableId}</Title>\n      <Form onSubmit={handleSubmit(onFormValid)}>\n        <Input\n          {...register(\"toDo\", { required: \"할 일을 입력하세요\" })}\n          type=\"text\"\n          placeholder={`Add Task On ${droppableId}`}\n          autoComplete=\"off\"\n          autoSave=\"off\"\n        />\n        <AddBtn>Add</AddBtn>\n      </Form>\n      <Droppable droppableId={droppableId}>\n        {(magic, snapshot) => (\n          <Board\n            isDraggingOver={snapshot.isDraggingOver}\n            draggingFromThisWith={Boolean(snapshot.draggingFromThisWith)}\n            ref={magic.innerRef}\n            {...magic.droppableProps}\n          >\n            {toDos.map((toDo, index) => (\n              <DraggableCard\n                key={toDo.id}\n                toDoID={toDo.id}\n                toDoText={toDo.text}\n                index={index}\n              />\n            ))}\n            {magic.placeholder}\n          </Board>\n        )}\n      </Droppable>\n    </Wrapper>\n  );\n}\n\nexport default DroppableBoard;\n","import { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDosState } from \"./atoms\";\nimport DroppableBoard from \"./components/DroppableBoard\";\n\nconst Boards = styled.section`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 30px;\n  gap: 20px;\n  @media (max-width: 810px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\ninterface TrashProps {\n  isDraggingOver: boolean\n}\n\nconst Trash = styled.div<TrashProps>`\n  position: fixed;\n  bottom: 50px;\n  right: 50px;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n  background-color: ${(props) =>\n    props.isDraggingOver ? \"crimson\" : props.theme.cardColor};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  font-size: 30px;\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDosState);\n  const onDragEnd = (info: DropResult) => {\n    const { destination, source } = info;\n    if (!destination) return;\n    if (source.droppableId === destination.droppableId) {\n      // 같은 보드에서 움직일 때의 상황 가정하기\n      setToDos((allBoards) => {\n        const targetBoard = [...allBoards[source.droppableId]];\n        const taskObj = targetBoard[source.index];\n        targetBoard.splice(source.index, 1);\n        targetBoard.splice(destination.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: targetBoard,\n        };\n      });\n    }\n    if (destination.droppableId === \"trash\") {\n      setToDos(allBoards => {\n        const targetBoard = [...allBoards[source.droppableId]];\n        targetBoard.splice(source.index, 1);\n        return {\n          ...allBoards,\n          [source.droppableId]: targetBoard\n        }\n      })\n      return null;\n    }\n    if (source.droppableId !== destination.droppableId) {\n      // 다른 보드끼리 움직일 때의 상황 가정하기\n      setToDos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const taskObj = sourceBoard[source.index];\n        const targetBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        targetBoard.splice(destination.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: targetBoard,\n        };\n      });\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Boards>\n        {Object.keys(toDos).map((boardId) => (\n          <DroppableBoard\n            key={boardId}\n            droppableId={boardId}\n            toDos={toDos[boardId]}\n          />\n        ))}\n      </Boards>\n      <Droppable droppableId=\"trash\">\n        {(magic, snapshot) => (\n          <Trash\n            isDraggingOver={snapshot.isDraggingOver}\n            ref={magic.innerRef}\n            {...magic.droppableProps}\n          >\n            <i className=\"xi-trash\"></i>\n          </Trash>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { darkTheme } from './theme';\nimport { Helmet } from 'react-helmet';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: ${(props) => props.theme.bgColor};\n    color: ${(props) => props.theme.textColor};\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Helmet>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://cdn.jsdelivr.net/npm/xeicon@2.3.3/xeicon.min.css\"\n      />\n    </Helmet>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme:DefaultTheme = {\n    bgColor: \"#2d3436\",\n    textColor: \"#dfe6e9\",\n    boardColor: \"#fdcb6e\",\n    cardColor: \"#b2bec3\"\n}"],"sourceRoot":""}